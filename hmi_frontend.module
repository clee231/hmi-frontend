<?php

/**
 * @file
 * Provides HMI Frontend functionality for ANL CCDC 2017.
 */


function hmi_frontend_mainpage() {
  return array('#markup' => '<p>' .  t('Simple page: The quick brown fox jumps over the lazy dog.') . '</p>');
}

/**
 * Handles rendering of the HMI Controls for admins
 */
function hmi_frontend_admin_form($form, &$form_state) {
  $form['statusTagline'] = array(
    '#markup' => '<p>This status page is for our valued customers to see the status of our water and power systems</p>'
  );
  $form['status_water'] = array(
    '#markup' => '<p>Water systems are operating at FAKE efficiency</p>'
  );
  $form['status_power'] = array(
    '#markup' => '<p>Power systems are operating at FAKE efficiency</p>'
  );

  $form['water_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Water')
  );

  $form['water_group']['water_on'] = array(
    '#type' => 'submit',
    '#name' => 'water_on',
    '#value' => t('Water On')
  );
  $form['water_group']['water_off'] = array(
    '#type' => 'button',
    '#value' => t('Water Off')
  );

  $form['power_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Power')
  );
  $form['power_group']['power_on'] = array(
    '#type' => 'button',
    '#value' => t('Power On')
  );
  $form['power_group']['power_off'] = array(
    '#type' => 'button',
    '#value' => t('Power Off')
  );

  $form['kill_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Kill')
  );
  $form['kill_group']['kill'] = array(
    '#type' => 'button',
    '#value' => t('Kill Switch')
  );
  return $form;
}

function hmi_frontend_admin_form_validate($form, &$form_state) {
  $options = array('water_on', 'water_off', 'power_on', 'power_off', 'kill');
  if (!in_array($form_state['clicked_button']['#name'], $options)) {
    form_set_error(NULL, "An invalid command was submitted. Please try another command.");
  }
}


function hmi_frontend_admin_form_submit($form, &$form_state) {
  $request_data['timestamp'] = time();
  if ($form_state['clicked_button']['#name'] == 'water_on') {
    $request_data['command'] = "on";
    $request_data['type'] = "water";
    drupal_set_message(t('"Water On" command has been submitted to the HMI.'));
  } 
  else if ($form_state['clicked_button']['#name'] == 'water_off') {
    $request_data['command'] = "off";
    $request_data['type'] = "water";
    drupal_set_message(t('"Water Off" command has been submitted to the HMI.'));
  }
  else if ($form_state['clicked_button']['#name'] == 'power_on') {
    $request_data['command'] = "on";
    $request_data['type'] = "power";
    drupal_set_message(t('"Power On" command has been submitted to the HMI.'));
  }
  else if ($form_state['clicked_button']['#name'] == 'power_off') {
    $request_data['command'] = "off";
    $request_data['type'] = "power";
    drupal_set_message(t('"Power On" command has been submitted to the HMI.'));
  }

  $key = variable_get('hmi_pkey');
  $encrypt = "";
  $estatus = openssl_public_encrypt(json_encode($request_data), $encrypt, $key);
  $url = variable_get('hmi_url');
  $ch = curl_init($url);
  $dataprep = array(
    'data' => base64_encode($encrypt)
  );
  $postData = http_build_query($dataprep, '', '&');
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $response = curl_exec($ch);
  curl_close($ch);
}


/**
 * Implement hook_menu()
 */
function hmi_frontend_menu() {
  $items['hmi2'] = array(
    'page callback' => 'hmi_frontend_mainpage',
    'access callback' => true,
  );
  $items['hmi2/admin'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hmi_frontend_admin_form'),
    'access arguments' => array('control hmi'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/hmi'] = array(
    'title' => 'HMI',
    'description' => 'HMI settings - ANL CCDC 2017',
    'position' => 'right',
    'weight' => -15,
    'page_callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer hmi'),
  );

  $items['admin/config/hmi/settings'] = array(
    'title' => 'HMI Frontend Settings',
    'description' => 'Manage HMI Frontend Configuration settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hmi_frontend_system_settings_form'),
    'access arguments' => array('administer hmi'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implement hook_system_settings_form()
 */
function hmi_frontend_system_settings_form() {
  $form = array();

  $form['hmi_url'] = array(
    '#type' => 'textfield',
    '#title' => t('HMI URL'),
    '#default_value' => variable_get('hmi_url', 'http://127.0.0.1/hmi')
  );
  $form['hmi_pkey'] = array(
    '#type' => 'textarea',
    '#title' => t('Public Key'),
    '#default_value' => variable_get('hmi_pkey', '<Public Encryption Key goes here>')
  );
  return system_settings_form($form);
}

/**
 * Implement hook_permission()
 */
function hmi_frontend_permission() {
  $perm = array(
    'administer hmi' => array(
      'title' => t('Administer HMI'),
      'restrict access' => TRUE,
      'description' => t('Allow user to modify how the HMI frontend will communicate with servers.'),
    ),
    'control hmi' => array(
      'title' => t('Control HMI'),
      'description' => t('Allow user to control the HMI.'),
    ),
  );
  return $perm;
}


/**
 * Implement hook_uninstall()
 */
function hmi_frontend_uninstall() {
  variable_del('hmi_url');
  variable_del('hmi_pkey');
}

/* vim: set tabstop=2:softtabstop=2:shiftwidth=2:expandtab */ 
?>
